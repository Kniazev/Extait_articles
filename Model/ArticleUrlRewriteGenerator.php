<?php

namespace Extait\Articles\Model;

use Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Model\UrlFinderInterface;

/**
 * Class ArticleUrlRewriteGenerator
 * @package Extait\Articles\Model\
 */
class ArticleUrlRewriteGenerator
{
    const ENTITY_TYPE = 'extait_article';

    const XML_PATH_ARTICLE_URL_SUFFIX = 'articles/seo/article_url_suffix';

    /**
     * @var ArticleFactory
     */
    protected $articleFactory;

    /**
     * @var UrlRewriteFactory
     */
    protected $urlRewriteFactory;

    /**
     * @var ScopeConfigInterface
     */
    protected $scopeConfig;

    /**
     * @var StoreManagerInterface
     */
    protected $storeManager;

    /**
     * @var UrlFinderInterface
     */
    protected $urlFinder;

    /**
     * ArticleUrlRewriteGenerator constructor.
     * @param ArticleFactory $articleFactory
     * @param UrlRewriteFactory $urlRewriteFactory
     * @param ScopeConfigInterface $scopeConfig
     * @param StoreManagerInterface $storeManager
     * @param UrlFinderInterface $urlFinder
     */
    public function __construct(
        ArticleFactory $articleFactory,
        UrlRewriteFactory $urlRewriteFactory,
        ScopeConfigInterface $scopeConfig,
        StoreManagerInterface $storeManager,
        UrlFinderInterface $urlFinder
    ) {
        $this->urlFinder = $urlFinder;
        $this->articleFactory = $articleFactory;
        $this->urlRewriteFactory = $urlRewriteFactory;
        $this->scopeConfig = $scopeConfig;
        $this->storeManager = $storeManager;
    }

    /**
     * @param Article $article
     * @return string
     */
    public function getCanonicalUrlPath($article)
    {
        return 'extait_articles/index/article/id/' . $article->getId();
    }

    /**
     * @param $article
     * @return string
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getRequestPath($article)
    {
        $title = $article->getTitle();

        $suffix = $this->getArticleUrlSuffix();

        $lastLetter = strlen($title) - 1;

        if ($title[$lastLetter] == '.') {
            $title = substr($title, 0, -1);
            $title = trim($title);
        }

        if ($suffix[0] != '.') {
            $suffix = '.' . $suffix;
        }

        $path = $title . $suffix;
        return str_replace(" ", "-", $path);
    }

    /**
     * @param $article
     * @return UrlRewrite
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function createUrlRewrite($article)
    {
        return $this->urlRewriteFactory->create()
            ->setStoreId(1)
            ->setEntityType(self::ENTITY_TYPE)
            ->setEntityId($article->getId())
            ->setRequestPath($this->getRequestPath($article))
            ->setTargetPath($this->getCanonicalUrlPath($article))
            ->setIsAutogenerated(1);
    }

    /**
     * @return mixed
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    protected function getArticleUrlSuffix()
    {
        $storeId = $this->storeManager->getStore()->getId();

        return $this->scopeConfig->getValue(
            self::XML_PATH_ARTICLE_URL_SUFFIX,
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
            $storeId);
    }

    /**
     * @param $articleId
     * @return string
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getRewriteUrl($articleId)
    {
        $baseUrl = $this->storeManager->getStore()->getBaseUrl();

        $rewrite = $this->urlFinder->findOneByData([
            UrlRewrite::ENTITY_ID => $articleId,
            UrlRewrite::ENTITY_TYPE => self::ENTITY_TYPE
        ]);

        if ($rewrite == null) {
            return $this->storeManager->getStore()->getBaseUrl() . 'extait_articles/index/article/id/' . $articleId;
        }

        $url = $baseUrl . $rewrite->getRequestPath();
        return $url;
    }
}
